#!/usr/bin/env python3import gigi.require_version('Gst', '1.0')gi.require_version('GstRtspServer', '1.0')from gi.repository import Gst, GstRtspServer, GObject, GLibimport os# Initialize GStreamerGst.init(None)class RTSPMediaFactory(GstRtspServer.RTSPMediaFactory):	def __init__(self, video_path):		super().__init__()		self.video_path = video_path		self.set_shared(True)  # Share pipeline among clients		self.connect("media-configure", self.on_media_configure)	def on_media_configure(self, factory, media):		# Prevent EOS from shutting down the media		media.set_eos_shutdown(False)	def do_create_element(self, _):		# Pipeline: filesrc -> qtdemux -> h264parse -> rtph264pay		pipeline_str = (			f"filesrc name=src location={self.video_path} ! qtdemux name=demux ! "			"h264parse ! rtph264pay config-interval=1 name=pay0 pt=96"		)		pipeline = Gst.parse_launch(pipeline_str)		demux = pipeline.get_by_name("demux")		self.payloader = pipeline.get_by_name("pay0")				# Initialize variables		self.duration = None		self.fps_num = None		self.fps_den = None		self.last_seqnum = None		self.last_timestamp = None				# Handle dynamic pad addition to get duration and frame rate		def on_pad_added(element, pad):			if pad.get_name() == "video_0":				success, duration = pad.query_duration(Gst.Format.TIME)				if success:					self.duration = duration					print(f"Cam: Duration: {duration / Gst.SECOND} seconds")				caps = pad.get_current_caps()				if caps:					structure = caps.get_structure(0)					if structure.has_field("framerate"):						framerate = structure.get_fraction("framerate")						# print(f"Framerate: {framerate}")  # Print the framerate to inspect it						# Check the type of framerate						_, self.fps_num, self.fps_den = framerate  # Unpacking the tuple						fps = self.fps_num / self.fps_den						print(f"Cam: Framerate: {fps} fps")		# endp on_pad_added		demux.connect("pad-added", on_pad_added)				# Probe RTP packets to track sequence numbers and timestamps		payloader_pad = self.payloader.get_static_pad("src")		def rtp_probe(pad, info):			buffer = info.get_buffer()			if buffer and buffer.get_size() >= 12:  # RTP header is at least 12 bytes				# Extract sequence number (16-bit, offset 2-3)				seqnum = (buffer.extract_dup(2, 2)[0] << 8) | buffer.extract_dup(3, 1)[0]				# Extract timestamp (32-bit, offset 4-7)				timestamp = (buffer.extract_dup(4, 4)[0] << 24) | \							(buffer.extract_dup(5, 3)[0] << 16) | \							(buffer.extract_dup(6, 2)[0] << 8) | buffer.extract_dup(7, 1)[0]				self.last_seqnum = seqnum				self.last_timestamp = timestamp			return Gst.PadProbeReturn.OK		payloader_pad.add_probe(Gst.PadProbeType.BUFFER, rtp_probe)		# Check position every 500ms		GLib.timeout_add(500, self.check_position, pipeline)		return pipeline	def check_position(self, pipeline):		if not self.duration:			return True  # Keep checking until duration is available				success, position = pipeline.query_position(Gst.Format.TIME)		if success and position >= self.duration - Gst.SECOND:			print("DEBUG:Cam:Approaching end, seeking to start")			if self.last_seqnum is not None and self.last_timestamp is not None:				# Ensure sequence numbers continue				self.payloader.set_property("seqnum-offset", self.last_seqnum + 1)				# Calculate timestamp delta based on frame rate (RTP clock is 90kHz for H.264)				delta = int(90000 * self.fps_den / self.fps_num) if (self.fps_num and self.fps_den) else 3600				self.payloader.set_property("timestamp-offset", self.last_timestamp + delta)			# Perform a flush seek to the start			pipeline.seek_simple(Gst.Format.TIME, Gst.SeekFlags.FLUSH | Gst.SeekFlags.KEY_UNIT, 0)		return True  # Continue the timeoutdef main():	video_path = "Office_Door_1280x720d.mp4"  # Replace with your video file path		if os.path.exists(video_path):		print(f"Streaming {video_path} with looping enabled")		factory = RTSPMediaFactory(video_path)	else:		print("Video file not found, using test pattern")		factory = GstRtspServer.RTSPMediaFactory()		factory.set_launch(			"( videotestsrc is-live=true ! video/x-raw,width=640,height=480,framerate=30/1 "			"! x264enc tune=zerolatency ! rtph264pay config-interval=1 name=pay0 pt=96 )"		)		# Set up RTSP server	server = GstRtspServer.RTSPServer()	port = 8554	server.set_service(str(port))	mounts = server.get_mount_points()	mounts.add_factory("/Cam001", factory)	server.attach(None)		print(f"Cam: RTSP server running at rtsp://0.0.0.0:{port}/Cam001")	GLib.MainLoop().run()if __name__ == "__main__":	main()